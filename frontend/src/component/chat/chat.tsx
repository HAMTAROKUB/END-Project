import './chat.css';
import { Input, Button } from 'antd';
import { useState, useRef, useEffect } from 'react';
import axios from 'axios';
import doraemon from '../../assets/doraemon.jpg';
import type { AccommodationInterface } from "../../interfaces/Accommodation";
import { GetAllAccommodations } from "../../services/https";

const Chat = () => {
  const [chatInput, setChatInput] = useState('');
  const [messages, setMessages] = useState<
    { text: string; sender: 'user' | 'bot' | 'confirm'; data?: any; isTripPlan?: boolean }[]
  >([
    {
      text: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! ‡∏â‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏£‡∏¥‡∏õ‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ ‡∏•‡∏≠‡∏á‡∏ö‡∏≠‡∏Å‡∏°‡∏≤‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô?',
      sender: 'bot',
    },
  ]);
  const [accommodations, setAccommodations] = useState<AccommodationInterface[]>([]);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    const fetchAccommodations = async () => {
      try {
        const data = await GetAllAccommodations();
        setAccommodations(data);
      } catch (error) {
        console.error('‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• accommodation ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß', error);
      }
    };
    fetchAccommodations();
  }, []);

  // ‡∏î‡∏∂‡∏á keyword ‡∏´‡∏•‡∏±‡∏á "‡∏â‡∏±‡∏ô‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏õ"
  const extractKeyword = (text: string) => {
    const trigger = '‡∏â‡∏±‡∏ô‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏õ';
    const idx = text.indexOf(trigger);
    if (idx === -1) return null;
    return text.slice(idx + trigger.length).trim();
  };

  // ‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ô‡∏µ‡πâ
  const findAccommodationId = (keyword: string) => {
    const match = accommodations.find(acc =>
      acc.Name?.toLowerCase().includes(keyword.toLowerCase())
    );
    return match?.ID || null;
  };

  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API gen-route ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ Groq ‡∏à‡∏±‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏£‡∏¥‡∏õ
  const generateRouteAndPlan = async (placeId: string, keyword: string) => {
    try {
      setLoading(true);
      setMessages(prev => [...prev, { text: `‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏£‡∏¥‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "${keyword}"...`, sender: 'bot' }]);

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å gen-route
      const res = await axios.get(`http://localhost:8080/gen-route?start=P${placeId}`);
      const routeData = res.data;

      const prompt = 
`You are a Thai travel planner.

Given this JSON route data, create a complete trip plan in **Thai language**. 

‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏£‡∏¥‡∏õ‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÉ‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πà‡∏≤‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏ä‡πâ‡∏≤ ‡∏™‡∏≤‡∏¢ ‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á ‡∏ö‡πà‡∏≤‡∏¢ ‡πÄ‡∏¢‡πá‡∏ô 

‡∏à‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏£‡∏¥‡∏õ‡∏ó‡∏µ‡πà‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ï‡∏≤‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡πÇ‡∏î‡∏¢‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏£‡πà‡∏≤‡∏ß ‡πÜ ‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‡πÄ‡∏ä‡πà‡∏ô

- ‡πÄ‡∏ä‡πâ‡∏≤ (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 9:00 ‡∏ô.): ‡∏ö‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏£‡∏Å‡πÅ‡∏•‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ô‡∏±‡πâ‡∏ô
- ‡∏™‡∏≤‡∏¢: ‡πÑ‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡∏≠‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ô‡∏±‡πâ‡∏ô
- ‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á: ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á ‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£
- ‡∏ö‡πà‡∏≤‡∏¢: ‡∏ï‡πà‡∏≠‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‡πÅ‡∏•‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ô‡∏±‡πâ‡∏ô
- ‡πÄ‡∏¢‡πá‡∏ô: ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô
‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 18.00 ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏•‡∏¢
‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤:
- ‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 1-2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
- ‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏Ñ‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏î‡∏¥‡∏ô 5 ‡∏Å‡∏°./‡∏ä‡∏°.
- ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‡πÉ‡∏´‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£ 60 ‡∏ô‡∏≤‡∏ó‡∏µ

‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô route data ‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏ ‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤ "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°" ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πâ‡∏ô ‡πÜ ‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏¥‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ô‡∏±‡πâ‡∏ô‡∏•‡∏á‡πÑ‡∏õ‡πÉ‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏£‡∏¥‡∏õ‡∏î‡πâ‡∏ß‡∏¢

‡∏ô‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ô‡∏µ‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ß‡∏ô‡∏•‡∏π‡∏õ (‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏¥‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥) ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏´‡∏≤‡∏Å‡∏û‡∏ö‡∏•‡∏π‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏ú‡∏ô‡∏ó‡∏£‡∏¥‡∏õ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏•‡∏π‡∏õ‡∏ô‡∏±‡πâ‡∏ô‡πÉ‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÅ‡∏ú‡∏ô‡∏ó‡∏£‡∏¥‡∏õ

‡∏à‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏£‡∏¥‡∏õ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ ‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ:

---

‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1: 

‡πÄ‡∏ä‡πâ‡∏≤ (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 9:00 ‡∏ô.): ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà ‡∏ß‡∏±‡∏î‡∏™‡∏∏‡∏ó‡∏±‡∏®‡∏ô‡πÄ‡∏ó‡∏û‡∏ß‡∏£‡∏≤‡∏£‡∏≤‡∏°‡∏£‡∏≤‡∏ä‡∏ß‡∏£‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏´‡∏≤‡∏£  
‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°: ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏ä‡∏°‡∏ß‡∏±‡∏î‡πÅ‡∏•‡∏∞‡∏™‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏∞‡∏û‡∏£‡∏∞‡∏û‡∏∏‡∏ó‡∏ò‡∏£‡∏π‡∏õ  
‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á ‡πÄ‡∏™‡∏≤‡∏ä‡∏¥‡∏á‡∏ä‡πâ‡∏≤ (‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á 0.09 ‡∏Å‡∏°. ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 1 ‡∏ô‡∏≤‡∏ó‡∏µ)

...

‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÉ‡∏ô‡∏ó‡∏£‡∏¥‡∏õ

---

‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ú‡∏ô‡∏ó‡∏£‡∏¥‡∏õ‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô

Route data: 
${JSON.stringify(routeData, null, 2)}

Make sure the response covers the entire route and is not cut off.
`;

      const groqApiKey = import.meta.env.VITE_REACT_APP_GROQ_API_KEY;

      const groqRes = await axios.post(
        'https://api.groq.com/openai/v1/chat/completions',
        {
          model: 'meta-llama/llama-4-scout-17b-16e-instruct',
          messages: [
            { role: 'system', content: 'You are a helpful travel assistant.' },
            { role: 'user', content: prompt },
          ],
          temperature: 0.7,
        },
        {
          headers: {
            Authorization: `Bearer ${groqApiKey}`,
            'Content-Type': 'application/json',
          },
        }
      );

      const tripPlan = groqRes.data.choices[0].message.content.trim();

      setMessages(prev => [...prev, { text: tripPlan, sender: 'bot', isTripPlan: true }]);
    } catch (error) {
      console.error('Error generating route or calling Groq', error);
      setMessages(prev => [
        ...prev,
        {
          text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏£‡∏¥‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á',
          sender: 'bot',
        },
      ]);
    } finally {
      setLoading(false);
    }
  };

  // ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  const handleUserMessage = async (userMessage: string) => {
    if (!userMessage.trim()) return;

    setMessages(prev => [...prev, { text: userMessage, sender: 'user' }]);

    // ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏≠ "‡πÉ‡∏ä‡πà" ‡πÅ‡∏•‡πâ‡∏ß‡∏°‡∏µ confirm message ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏£‡∏¥‡∏õ‡πÄ‡∏•‡∏¢
    if (userMessage.trim() === '‡πÉ‡∏ä‡πà') {
      const lastConfirm = [...messages].reverse().find(m => m.sender === 'bot' && m.text.includes('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏â‡∏±‡∏ô‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏£‡∏¥‡∏õ'));
      if (lastConfirm && lastConfirm.data) {
        generateRouteAndPlan(lastConfirm.data.placeId, lastConfirm.data.keyword);
        return;
      }
    }

    const keyword = extractKeyword(userMessage);

    if (keyword) {
      const placeId = findAccommodationId(keyword);
      if (placeId) {
        // ‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå "‡πÉ‡∏ä‡πà" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
        setMessages(prev => [
          ...prev,
          {
            text: `‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏â‡∏±‡∏ô‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏£‡∏¥‡∏õ‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å "${keyword}" ‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞? ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå "‡πÉ‡∏ä‡πà" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô`,
            sender: 'bot',
            data: { keyword, placeId },
          },
        ]);
        return;
      }
    }

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ó‡∏£‡∏¥‡∏õ ‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
    const lower = userMessage.toLowerCase();
    let botReply = '';
    if (lower.includes('‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ')) {
      botReply = '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞ üòä ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì';
    } else if (lower.includes('‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∞‡πÑ‡∏£')) {
      botReply = '‡∏â‡∏±‡∏ô‡∏ä‡∏∑‡πà‡∏≠ TravelBot ‡∏Ñ‡πà‡∏∞ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏£‡∏¥‡∏õ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì!';
    } else {
      botReply = '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏∞‡∏Ñ‡∏∞ üòä ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å ‡∏ö‡∏≠‡∏Å‡∏â‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢!';
    }

    setMessages(prev => [...prev, { text: botReply, sender: 'bot' }]);
  };

  // ‡∏Å‡∏î Enter ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      if (chatInput.trim()) {
        handleUserMessage(chatInput.trim());
        setChatInput('');
      }
    }
  };

  // ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÅ‡∏ä‡∏ó‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  return (
    <div className="chat-container">
      <div className="chat-header">
        <h3>Let me help you to plan your trip</h3>
        <p>Just describe your stay preferences and I‚Äôll bring you the most personalised results.</p>
      </div>

      <div className="chat-messages">
        {messages.map((msg, index) =>
          msg.sender === 'bot' ? (
            <div key={index} className="bot-message-wrapper">
              <img src={doraemon} alt="Bot Avatar" className="bot-avatar" />
              <div className="chat-message bot-message" style={msg.isTripPlan ? { whiteSpace: 'pre-wrap', lineHeight: 1.5 } : {}}>
                {msg.text}
              </div>
            </div>
          ) : (
            <div key={index} className="chat-message user-message">
              {msg.text}
            </div>
          )
        )}
        {loading && (
          <div className="bot-message-wrapper">
            <img src={doraemon} alt="Bot Avatar" className="bot-avatar" />
            <div className="chat-message bot-message">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå...</div>
          </div>
        )}
        <div ref={messagesEndRef} />
      </div>

      <div className="chat-input">
        <Input
          placeholder="Ask anything..."
          value={chatInput}
          onChange={(e) => setChatInput(e.target.value)}
          onKeyDown={handleKeyDown}
          variant="borderless"
          disabled={loading}
          style={{ flexGrow: 1 }}
        />
        <Button
          type="text"
          onClick={() => {
            if (chatInput.trim()) {
              handleUserMessage(chatInput.trim());
              setChatInput('');
            }
          }}
        >
          Send
        </Button>
      </div>
    </div>
  );
};

export default Chat;
